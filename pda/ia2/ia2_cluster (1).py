# -*- coding: utf-8 -*-
"""ia2_cluster.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PQ1dICKhH0XCtq7s9LO_kRrYa0I-caOT
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler,LabelEncoder
le=LabelEncoder()
from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix, classification_report,f1_score

df=pd.read_csv('https://raw.githubusercontent.com/Deepsphere-AI/LVA-Batch5-Assessment/main/Mall_Customers.csv')

df.info()

df.describe()

df.head()

#duplicates checking
df.duplicated().sum()

#no duplicate so null check
df.isnull().sum()

#null in income score as it is float we will give mean()
mean_col=df['Annual Income (k$)'].mean(skipna=True)
df['Annual Income (k$)']=df['Annual Income (k$)'].fillna(mean_col)

df.isnull().sum()

df.head()

#eda
num_col=[x for x in df.select_dtypes(include=['float64','int64']).columns]
num_col

for n in num_col:
  plt.figure(figsize=(10,5))
  sns.histplot(df[n])
  plt.title(f'histogram of {n}')
  plt.xlabel(n)
  plt.ylabel('frequency')
  plt.show()

for i in range(len(num_col)):
  for j in range(i+1,len(num_col)):
    plt.figure(figsize=(10,5))
    sns.scatterplot(data=df,x=num_col[i],y=num_col[j])
    plt.title(f'scatter plot of {num_col[i]} and {num_col[j]}')
    plt.xlabel(num_col[i])
    plt.ylabel(num_col[j])
    plt.show()

corr_map=df[num_col].corr()
plt.figure(figsize=(10,5))
sns.heatmap(corr_map,cmap='coolwarm',annot=True)
plt.title('heatmap  of customer dataset')
plt.show()

plt.figure(figsize=(10,5))
df['Gender'].value_counts().plot(kind='bar')
plt.title(f'bar plot')
plt.xlabel('gender')
plt.ylabel('freq')
plt.show()

end_df=df[num_col]

num_col

scaler=MinMaxScaler()
end_scaler=pd.DataFrame(scaler.fit_transform(end_df),columns=num_col)

#elbow
wcss=[]
for i in range(1,11):
  model=KMeans(n_clusters=i,init='k-means++',random_state=42)
  model.fit(end_df)
  wcss.append(model.inertia_)
plt.plot(range(1,11),wcss,marker='o')
plt.grid=True
plt.show()

kmeans = KMeans(n_clusters=3, random_state=0)
kmeans.fit(end_df)
labels = kmeans.labels_
df['clusters'] = labels
centers = kmeans.cluster_centers_

plt.figure(figsize=(8, 6))
plt.scatter(end_scaler.iloc[:, 0], end_scaler.iloc[:, 1], c=labels, cmap='viridis', s=50, alpha=0.5)

# Assign names to the clusters
cluster_names = ['Cluster 1', 'Cluster 2', 'Cluster 3']

# Create legend with cluster names
for i, cluster_name in enumerate(cluster_names):
    plt.scatter([], [], label=cluster_name, c=plt.cm.viridis(i / (len(cluster_names) - 1)), alpha=0.5)

plt.title('K-means Clustering')
plt.xlabel('X1')
plt.ylabel('X2')
plt.legend()
plt.show()

from sklearn.metrics import silhouette_score
ss=silhouette_score(end_df,model.labels_)
print(ss)

