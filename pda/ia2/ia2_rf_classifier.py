# -*- coding: utf-8 -*-
"""ia2_rf_classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bxYj_afpgxMhdIa8khmMEdxXrOx1SeZ1
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder,MinMaxScaler
from sklearn.metrics import accuracy_score,precision_score,recall_score,classification_report,confusion_matrix

df=pd.read_csv('https://raw.githubusercontent.com/Deepsphere-AI/LVA-Batch5-Assessment/main/winequality-red.csv')

df.info()

df.describe()

df.head()

df.duplicated().sum()

#duplicates are present so we will remove those
df.drop_duplicates(inplace=True)

df.duplicated().sum()

#checking for null
df.isnull().sum()

#there are null in columns as they are numerical mode will be filled
num_col=[x for x in df.select_dtypes(include=['float64','int64']).columns]
num_col

float_col=[x for x in df.select_dtypes(include=['float64']).columns]
for n in float_col:
  mean_col=df[n].mean(skipna=True)
  df[n]=df[n].fillna(mean_col)

df.head()

df.isna().sum()

#eda
for n in num_col:
  plt.figure(figsize=(10,5))
  sns.histplot(df[n])
  plt.title(f'histogram of {n}')
  plt.xlabel(n)
  plt.ylabel('frequency')
  plt.show()

for i in range(len(num_col)):
  for j in range(i+1,len(num_col)):
    plt.figure(figsize=(10,5))
    sns.scatterplot(data=df,x=num_col[i],y=num_col[j])
    plt.title(f'scatter plot of {num_col[i]} and {num_col[j]}')
    plt.xlabel(num_col[i])
    plt.ylabel(num_col[j])
    plt.show()

corr_map=df.corr()
plt.figure(figsize=(10,5))
sns.heatmap(corr_map,cmap='coolwarm',annot=True)
plt.title('heatmap  of wine dataset')
plt.show()

#box plot
for n in num_col:
  plt.figure(figsize=(10,5))
  sns.boxplot(df[n])
  plt.title(f'blox plot of {n}')
  plt.xlabel(n)
  plt.ylabel('frequency')
  plt.show()

df.loc[df['quality'] <= 6, 'quality'] = 0
df.loc[df['quality'] > 6, 'quality'] = 1

x = df.drop(columns = ['quality'])
y = df['quality']
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3)
model = RandomForestClassifier(n_estimators=100,random_state=42)
model.fit(x_train,y_train)
y_pred = model.predict(x_test)

print("Accuracy:",round(accuracy_score(y_test,y_pred)*100,2))
prec = precision_score(y_test, y_pred)
print("Precision:", round(prec*100,2),"%")
recall = recall_score(y_test, y_pred)
print("Recall:", round(recall*100,2),"%")
print("confusion matrix:\n",confusion_matrix(y_test,y_pred))
print("CR:\n",classification_report(y_test,y_pred))