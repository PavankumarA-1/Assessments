# -*- coding: utf-8 -*-
"""pda_final_reg.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R9xRUWWrUuR-oKNPjTYNq15Gq9DcoNbA
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler,LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score,mean_squared_error

df=pd.read_csv('https://raw.githubusercontent.com/Deepsphere-AI/LVA-Batch5-Assessment/main/Fare%20prediction.csv')

df.info()

df.describe()

df.head()

df.duplicated().sum()

df.isnull().sum()

#no duplicate and no nulls

x=df
x['pickup_datetime']=pd.to_datetime(df['pickup_datetime'])
x.info()

#eda
num_col=[x for x in x.select_dtypes(include=['float64','int64']).columns]
num_col

#histogram
for n in num_col:
  plt.figure(figsize=(10,5))
  sns.histplot(x[n])
  plt.xlabel(n)
  plt.ylabel('frequency')
  plt.title(f'histogram of {n}')
  plt.show()

cat_col=[x for x in x.select_dtypes(include='object').columns]

plt.figure(figsize=(10,5))
df[cat_col[0]].value_counts().plot(kind='bar')
plt.xlabel(n)
plt.ylabel('frequency')
plt.title('bar of keys')
plt.show()

#bivarient analysis
for i in range(len(num_col)):
  for j in range(i+1,len(num_col)):
    plt.figure(figsize=(10,5))
    sns.scatterplot(data=df,x=num_col[i],y=num_col[j])
    plt.xlabel(num_col[i])
    plt.ylabel(num_col[j])
    plt.title(f'sactter plot of {num_col[i]} and {num_col[j]}')
    plt.show()

#key is not usefull so we can remove it

#multivarient analysis analysis
corr_mat=df[num_col].corr()
print(corr_mat)
plt.figure(figsize=(10,5))
sns.heatmap(corr_mat,annot=True,cmap='coolwarm')
plt.title('heat map of corelation matrix')
plt.show()

coo_date=x[['pickup_datetime','fare_amount']].corr()
coo_date

#removing key and pick up
lin_reg_df=df.drop(columns=['key','pickup_datetime'])

le=LabelEncoder()
for i in cat_col:
  df[i]=le.fit_transform(df[i])

X=lin_reg_df.drop('fare_amount',axis=1)
Y=lin_reg_df['fare_amount']
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2)

scaler=MinMaxScaler()
X_train=scaler.fit_transform(X_train)
X_test=scaler.transform(X_test)

model=LinearRegression()
model.fit(X_train,Y_train)
y_pred=model.predict(X_test)
mse=mean_squared_error(Y_test,y_pred)
print(f'mse {mse}')
r2=r2_score(Y_test,y_pred)
print(f'r2_score {r2}')